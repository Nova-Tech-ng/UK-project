# -*- coding: utf-8 -*-
"""linear_regression_model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xez98XXMqMv75tQVRx9V8TpFXYqObXqL
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import pickle
from sklearn.preprocessing import OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from google.colab import files

# Load your data into a pandas DataFrame
data = pd.read_csv("/content/sample_data/student data.csv")

# Print the first 50 rows of the data
# print(data.head(50))

# Define the grade mapping dictionary
grade_mapping = {
  "A+": 4,
  "A": 4,
  "A-": 4,  # Assuming all A's have the same value
  "B+": 3,
  "B": 3,
  "B-": 3,  # Assuming all B's have the same value
  "C+": 2,
  "C": 2,
  "C-": 2,  # Assuming all C's have the same value
  "D+": 1,
  "D": 1,
  "D-": 1,  # Assuming all D's have the same value
  "F": 0
}

# Apply mapping to convert strings to numbers directly in "Actual Grade"
data["Actual Grade"] = data["Actual Grade"].replace(grade_mapping)

# Ensure "Actual Grade" is now numerical (check data types again)


# print(data["Actual Grade"].dtypes)  # Check if it's numerical now

# Print the first 50 rows of the cleaned data (optional)


# print(data.head(50))

# Features for training
features = ["Age", "Past Grades", "Standardized Test Scores",
            "Class Size", "Attendance", "Study Time"]  # Assuming categorical features are encoded

# Remove 'Student ID' from features_clean as it is not a predictive feature
features_clean = ["Age", "Past Grades", "Standardized Test Scores",
                  "Class Size", "Attendance", "Study Time"]
data_clean = data.copy()

# Check unique values in 'Actual Grade' before mapping (should all be numerical now)
print("Unique values in 'Actual Grade' before mapping:", data_clean['Actual Grade'].unique())


# Handle missing values using SimpleImputer (but ONLY for numerical features)
imputer = SimpleImputer(strategy='mean') # Replace 'mean' with other strategies if needed
numerical_features = ["Age", "Past Grades", "Standardized Test Scores", "Class Size", "Attendance", "Study Time"]  # List numerical columns
data_clean[numerical_features] = imputer.fit_transform(data_clean[numerical_features])

# Check if there are still missing values in 'Actual Grade'
if data_clean['Actual Grade'].isnull().any():
    # If there are, investigate further. Are there grades not in your mapping?
    print("Warning: There are still missing values in 'Actual Grade'. Check your grade mapping.")
    print(data_clean[data_clean['Actual Grade'].isnull()]) # Print rows with missing grades


# Train the linear regression model (after applying grade mapping)
model = LinearRegression()
model.fit(data_clean[features_clean], data_clean["Actual Grade"])
# Make predictions on the entire data
predictions = model.predict(data_clean[features_clean])

# Calculate mean squared error
mse = mean_squared_error(data_clean["Actual Grade"], predictions)


plt.scatter(data_clean["Actual Grade"], predictions)
plt.xlabel("Actual Grade")
plt.ylabel("Predicted Grade")
plt.title("Actual vs. Predicted Grades")
plt.show()

print("Mean Squared Error:", mse)





# Save the trained model to a pickle file
with open('linear_regression_model.pkl', 'wb') as f:
    pickle.dump(model, f)

# Download the pickle file using Colab's file download functionality

files.download('linear_regression_model.pkl')





# Create a list to store predicted grades for all students
predicted_grades = []

# Loop through all student data and predict grades
for index, row in data_clean.iterrows():
    student_data = row.to_frame().T  # Convert row to a DataFrame
    predicted_grade = model.predict(student_data[features_clean])[0]
    predicted_grades.append(predicted_grade)

# Save predicted grades to a CSV file (optional)
predicted_grades_df = pd.DataFrame({"Student ID": data["Student ID"], "Predicted Grade": predicted_grades})
predicted_grades_df.to_csv("predicted_grades.csv", index=False)

# Print the predicted grades DataFrame (optional)
print(predicted_grades_df)

# Download the CSV file
files.download('predicted_grades.csv')




#####################################################################################################################################################
#TESTING




# Enter the student ID
student_id = 1051  # Replace with actual ID

# Filter data for the student
student_data = data[data["Student ID"] == student_id]

# Predict grade using the model
predicted_grade = model.predict(student_data[features])

# Access the predicted value (assuming there's only one student)
predicted_grade_value = predicted_grade[0]

print("Predicted Grade for Student ID", student_id, ":", predicted_grade_value)

from google.colab import drive
drive.mount('/content/drive')

